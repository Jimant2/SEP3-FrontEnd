@page "/Chat"
@attribute [Authorize(Policy = "SecurityLevel2")]
@using SEP3_FrontEnd.Models
@using SEP3_FrontEnd.Authentication
@using SEP3_FrontEnd.Data
@using System.Text.Json



@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject IChatService ChatService;

<h3>Chat</h3>
<div class="chatPage">

    <div class="Messages">
        <ul class="list-group" id="messagesList">
            @if (messages != null)
            {
                <h3>Messages:</h3>
                foreach (var item in messages)
                {
                    <li class="list-group-item">@item.sender said @item.body</li>
                }
            }
        </ul>
    </div>
    <div class="commonControls">
        @if (displayConnect)
        {
            <button type="button" class="btn btn-primary" @onclick="async () => await ConnectToChat()">Connect</button>
        }
        @if (displayReconnect)
        {
            <button type="button" class="btn btn-primary" @onclick="async () => await ReconnectToChat()">Reconnect to chat</button>
        }
    </div>
    <div class="closeChat">
        @if (displayCloseRoom)
        {
            <button type="button" class="btn btn-primary" @onclick="async () => await CloseChatRoom()">
                Delete chat
            </button>
        }
    </div>
    <div class="inputField">
        @if (displayInputField)
        {
            <textarea class="textarea is-primary" aria-label="Message" @bind="message"></textarea>
        }
    </div>
    <div class="sendMessage">
        @if (displaySendMessage)
        {
            <button type="button" class="btn btn-primary" @onclick="async () => await SendMessage()">
            </button>
        }
    </div>
    <div class="disconnect">
        @if (displayDisconnect)
        {
            <button type="button" class="btn btn-primary" @onclick="async () => await Disconnect()">
                Disconnect
            </button>
        }
    </div>
</div>
@code {
    private string message;
    IList<Message> messages = null;
    IList<ChatRoom> chatRooms = null;
    User chatUser;
    ChatRoom currentRoom;
    private bool displayRefresh;
    private bool displayExitRoom;
    private bool displayConnect;
    private bool displayReconnect;
    private bool displayDisconnect;
    private bool displayCloseRoom;
    private bool displaySendMessage;
    private bool displayInputField;


    protected override async Task OnInitializedAsync()
    {
        chatUser = await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetUser();
        await JSRuntime.InvokeVoidAsync("EstablishConnection");
        StateHasChanged();
    }

    public async Task ClearChat()
    {
        await JSRuntime.InvokeVoidAsync("ClearChatJS");
    }
    public async Task ReconnectToChat()
    {
        await JSRuntime.InvokeVoidAsync("ReconnectToChatJS", chatUser.Id);
        await FetchRoom();
    }




    public async Task ConnectToRoom(string roomId)
    {
        await ClearChat();
        await JSRuntime.InvokeVoidAsync("ConnectToRoomJS", roomId);
        await FetchRoom();
      
    }

    public async Task CloseChatRoom()
    {
        await JSRuntime.InvokeVoidAsync("CloseChatRoomJS");
        await ClearChat();

    }

    public async Task ExitRoom()
    {
        await JSRuntime.InvokeVoidAsync("ExitRoomJS");
       
    }


    // called when user presses on connect
    private async Task ConnectToChat()
    {
        await JSRuntime.InvokeVoidAsync("GoOnlineJS", chatUser.Id, chatUser.SecurityLevel == 2);

    }

    // called when user press on send message
    private async Task SendMessage()
    {

        await JSRuntime.InvokeVoidAsync("SendMessageJS", message);       
        message = "";

    }



    // called on dissconnect press
    private async Task Disconnect()
    {
        await JSRuntime.InvokeVoidAsync("DisconnectJS", chatUser.Id);
        await ClearChat();

    }


    public async Task FetchRoom()
    {
        await Task.Delay(100);
        chatUser = await ChatService.GetUserById(chatUser.Id);
        if (chatUser != null)
        {
            currentRoom = await ChatService.GetRoom(chatUser.CurrentRoom);
            if (currentRoom != null)
            {
                messages = JsonSerializer.Deserialize<IList<Message>>(JsonSerializer.Serialize(currentRoom.Messages));
            }
        }
        StateHasChanged();

    }

}
